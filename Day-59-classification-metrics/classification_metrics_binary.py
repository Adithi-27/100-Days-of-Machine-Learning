# -*- coding: utf-8 -*-
"""classification-metrics-binary.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19WzW6Spx9dGiDukpj8BMUBLCsVGbYcEP
"""

import numpy as np
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer

df = pd.read_csv('/content/heart_disease_uci.csv')

label_encoder = LabelEncoder()

for column in df.columns:
    if df[column].dtype == 'object':
        label_encoder.fit(df[column].unique())
        df[column] = label_encoder.transform(df[column])

X_train, X_test, y_train, y_test = train_test_split(df.iloc[:, 0:-1], df.iloc[:, -1], test_size=0.2, random_state=2)

imputer = SimpleImputer(strategy='mean')

X_train = imputer.fit_transform(X_train)
X_test = imputer.transform(X_test)

clf1 = LogisticRegression()
clf2 = DecisionTreeClassifier()
clf1.fit(X_train, y_train)
clf2.fit(X_train, y_train)

y_pred1 = clf1.predict(X_test)
y_pred2 = clf2.predict(X_test)

from sklearn.metrics import accuracy_score,confusion_matrix
print("Accuracy of Logistic Regression",accuracy_score(y_test,y_pred1))
print("Accuracy of Decision Trees",accuracy_score(y_test,y_pred2))

confusion_matrix(y_test,y_pred1)

print("Logistic Regression Confusion Matrix\n")
num_classes = len(np.unique(y_test))
pd.DataFrame(confusion_matrix(y_test, y_pred1), columns=list(range(num_classes)))

print("Decision Tree Confusion Matrix\n")
num_classes = len(np.unique(y_test))
pd.DataFrame(confusion_matrix(y_test, y_pred2), columns=list(range(num_classes)))

result = pd.DataFrame()
result['Actual Label'] = y_test
result['Logistic Regression Prediction'] = y_pred1
result['Decision Tree Prediction'] = y_pred2

result.sample(10)

from sklearn.metrics import recall_score,precision_score,f1_score

print("For Logistic regression Model")
print("-"*50)
num_classes = len(np.unique(y_test))
cdf = pd.DataFrame(confusion_matrix(y_test,y_pred1),columns=list(range(0,num_classes)), index=list(range(0,num_classes)))
print(cdf)
print("-"*50)
print("Precision - ",precision_score(y_test,y_pred1, average='weighted'))
print("Recall - ",recall_score(y_test,y_pred1, average='weighted'))
print("F1 score - ",f1_score(y_test,y_pred1, average='weighted'))

print("For DT Model")
print("-"*50)
num_classes = len(np.unique(y_test))
cdf = pd.DataFrame(confusion_matrix(y_test,y_pred2),
                   columns=list(range(0,num_classes)),
                   index=list(range(0,num_classes)))
print(cdf)
print("-"*50)
print("Precision - ",precision_score(y_test,y_pred2, average='weighted'))
print("Recall - ",recall_score(y_test,y_pred2, average='weighted'))
print("F1 score - ",f1_score(y_test,y_pred2, average='weighted'))

precision_score(y_test,y_pred1,average=None)

precision_score(y_test,y_pred2,average=None)

recall_score(y_test,y_pred2,average=None)